from datetime import datetime, timedelta
from pathlib import Path

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.types import FSInputFile
from pyexpat.errors import messages

from config.config import USER_COOL_DOWN_IN_MINUTE, N_DIGITS_DICT
from database.repository import UserRepository, CryptoRepository
from database.schemas import UserBase, CryptoBase
from filters.filters import CheckPrice
from keyboards.crypto_btn import get_crypto_btn
from keyboards.exchange_btn import get_price_type_method_btn, get_back_btn
from keyboards.main_menu import menu_btn
from lexicon.lexicon import LEXICON, LEXICON_MENU
from services.services import CMCHTTPClient
from utils.number import round_number

router = Router()

current_path = Path().resolve()
image_path: str = str(current_path / "images/logo.jpg")

# –°–æ–∑–¥–∞–µ–º "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
last_used = {}

cmc_client = CMCHTTPClient()


class FSMFillForm(StatesGroup):
    select_operation = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    select_crypto = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    select_price_method = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    fill_price = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã


# Start

@router.message(
    CommandStart(),
    lambda message: message.chat.type == 'private',
)
async def process_start_command(message: Message, state: FSMContext):
    """
    Start bot by command /start.
    Send welcome message and set menu buttons.

    :param message:
    :param state:
    :return:
    """
    image = FSInputFile(image_path)
    result: UserBase | bool = await  UserRepository.insert_data(user_id=str(message.from_user.id))

    if result:
        print(f"Add new user {result.user_id}")

    await message.answer_photo(
        photo=image,
        caption=LEXICON["/start"],
        reply_markup=menu_btn()
    )
    await state.clear()


@router.message(
    lambda message: message.chat.type == 'private' and message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üë•",
)
async def process_support_command(message: Message, state: FSMContext):
    image = FSInputFile(image_path)

    await message.answer_photo(photo=image, caption=LEXICON["support"])
    await state.clear()


# Select buy/sell

@router.message(
    F.text.in_([LEXICON_MENU.get("buy"), LEXICON_MENU.get("sell")]),
    lambda message: message.chat.type == 'private',
)
async def process_method_sent(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–æ–∫ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å.
    –¢–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ª–µ–∫—Å–∏–∫–æ–Ω–∞.

    –í –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏.
    –ò –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞—à–∏–Ω —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
    –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.

    :param message:
    :param state:
    :return:
    """
    await state.clear()
    await state.set_state(FSMFillForm.select_operation)

    if message.text == LEXICON_MENU.get("buy"):
        await state.update_data(operation="buy")
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    else:
        await state.update_data(operation="sell")
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"

    await state.set_state(FSMFillForm.select_crypto)

    await message.answer(
        text=text,
        reply_markup=await get_crypto_btn(key="get")
    )


# Select Crypto

@router.callback_query(
    StateFilter(FSMFillForm.select_crypto),
    F.data.startswith("get_"),
    lambda message: message.message.chat.type == 'private'
)
async def process_crypto_sent(callback: CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π.

    –ï—Å–ª–∏ operation == buy, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    –∏ —Å—Ç–∞–≤–∏—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã,
    –∞ –µ—Å–ª–∏ operation == sell, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∞–≤–∏—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã.

    :param callback:
    :param state:
    :return:
    """
    symbol: str = callback.data.split("_", 1)[-1]

    crypto: None | CryptoBase = await CryptoRepository.find_one_or_none(symbol=symbol)

    if crypto is None:
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(crypto=callback.data)

    data = await state.get_data()
    operation: str = data["operation"]

    if operation == "buy":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã:",
            reply_markup=get_price_type_method_btn(symbol)
        )

        await state.set_state(FSMFillForm.select_price_method)
    else:
        await callback.message.edit_text(
            text=f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {symbol}:",
            reply_markup=get_back_btn()
        )

        await state.set_state(FSMFillForm.fill_price)


@router.message(
    StateFilter(FSMFillForm.select_crypto),
    lambda message: message.chat.type == 'private',
)
async def warning_not_crypto(message: Message):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤—ã–±–æ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.

    :param message:
    :return:
    """
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
        reply_markup=await get_crypto_btn(key="get")
    )


# Select pay

@router.callback_query(
    StateFilter(FSMFillForm.select_price_method),
    F.data.in_(["usdt_type", "rub_type"]),
    lambda message: message.message.chat.type == 'private'
)
async def process_price_type_method_sent(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    symbol: str = data["crypto"].split("_", 1)[-1]
    crypto: None | CryptoBase = await CryptoRepository.find_one_or_none(symbol=symbol)

    if crypto is None:
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.update_data(price_method=callback.data)

    if callback.data == "rub_type":
        text: str = "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö: "
    else:
        text: str = "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ –∫—Ä–∏–ø—Ç–µ: "

    await callback.message.edit_text(
        text=text,
        reply_markup=get_back_btn()
    )
    await state.set_state(FSMFillForm.fill_price)


@router.message(
    StateFilter(FSMFillForm.select_price_method),
    lambda message: message.chat.type == 'private'
)
async def warning_not_price_type(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
        reply_markup=get_price_type_method_btn(data["crypto"])
    )


@router.message(
    StateFilter(FSMFillForm.fill_price),
    lambda message: message.chat.type == 'private',
    CheckPrice(),
)
async def process_price_sent(message: Message, state: FSMContext, bot: Bot, price: float):
    data = await state.get_data()
    symbol: str = data["crypto"].split("_", 1)[-1]
    crypto: None | CryptoBase = await CryptoRepository.find_one_or_none(symbol=symbol)

    if crypto is None:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    unit_round, price_round = N_DIGITS_DICT[symbol]

    count_and_price: int | float = round_number(price, price_round)
    price_by_unit: float = float(await cmc_client.get_currency(symbol))

    price_method: str = data.get("price_method")

    user_id = message.from_user.id
    now = datetime.now()

    if data.get("operation") == "buy":
        price_by_unit += price_by_unit * unit_round
        price_by_unit = round_number(price_by_unit, 0)

        if price_method == "rub_type":
            payment = count_and_price
            crypto_count = f"{round_number(float(payment) / price_by_unit, price_round):.6f}".rstrip('0')
        else:
            payment = round_number(count_and_price * price_by_unit, 0)
            crypto_count = f"{count_and_price:.6f}".rstrip('0')

        text: str = LEXICON["buy_answer"].format(
            crypto_count=crypto_count,
            crypto=crypto,
            price_by_unit=price_by_unit,
            payment=payment
        )
    else:
        payment = round_number(count_and_price, price_round)
        price_by_unit -= price_by_unit * unit_round
        get_price = round_number(price_by_unit * payment, 0)

        price_by_unit = round_number(price_by_unit, 0)

        text: str = LEXICON["sell_answer"].format(
            get_price=get_price,
            payment=payment,
            crypto=symbol
        )
        payment = get_price

    if payment >= 200_000:
        await message.answer(LEXICON["200k_order"])
    elif payment < 1_000:
        await message.answer(
            text='–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 —Ä—É–±–ª–µ–π!!!\n'
                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.'
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        if user_id in last_used:
            elapsed_time = now - last_used[user_id]
            if elapsed_time < timedelta(minutes=USER_COOL_DOWN_IN_MINUTE):
                remaining_time = (
                        timedelta(minutes=USER_COOL_DOWN_IN_MINUTE) - elapsed_time
                ).seconds

                await message.reply(
                    f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {
                    remaining_time // 60} –º–∏–Ω—É—Ç(—ã) –∏ {remaining_time % 60} —Å–µ–∫—É–Ω–¥."
                )

                await state.clear()

                return

        image = FSInputFile(image_path)
        await message.answer_photo(photo=image, caption=text)

        text = f"""
–í–ù–ò–ú–ê–ù–ò–ï –í–ù–ò–ú–ê–ù–ò–ï!!! –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!!\n
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={message.from_user.id}">{message.from_user.id} : {message.from_user.first_name} {message.from_user.last_name}</a>
–•–æ—á–µ—Ç: {"–∫—É–ø–∏—Ç—å" if data.get("operation") == "buy" else "–ø—Ä–æ–¥–∞—Ç—å"}
–ö—Ä–∏–ø—Ç–∞: {symbol}
–ú–µ—Ç–æ–¥: {price_method}
–ö—É—Ä—Å: {price_by_unit}
–°—É–º–º–∞: {count_and_price}
    """

        await bot.send_message(str(-1002431701698), text)
        await state.clear()
        last_used[user_id] = now


@router.message(
    StateFilter(FSMFillForm.fill_price),
    lambda message: message.chat.type == 'private'
)
async def warning_not_price(message: Message):
    await message.answer(
        text='–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 200_000 \n\n'
             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
    )


# Back

@router.callback_query(
    StateFilter(FSMFillForm.select_price_method),
    F.data.in_(["back"]),
    lambda message: message.message.chat.type == 'private'
)
async def process_back_to_select_crypto(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(FSMFillForm.select_operation)

    if data["operation"] == "buy":
        text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:"
    else:
        text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"

    await state.set_state(FSMFillForm.select_crypto)

    await callback.message.edit_text(
        text=text,
        reply_markup=await get_crypto_btn(key="get")
    )


@router.callback_query(
    StateFilter(FSMFillForm.fill_price),
    F.data.in_(["back"]),
    lambda message: message.message.chat.type == 'private'
)
async def process_back_to_select_price_method(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    symbol: str = data["crypto"].split("_", 1)[-1]
    crypto: None | CryptoBase = await CryptoRepository.find_one_or_none(symbol=symbol)

    if crypto is None:
        await callback.message.answer("–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    await state.set_state(FSMFillForm.select_operation)

    if data["operation"] == "buy":
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã",
            reply_markup=get_price_type_method_btn(symbol)
        )

        await state.set_state(FSMFillForm.select_price_method)
    else:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:",
            reply_markup=await get_crypto_btn(key="get")
        )

        await state.set_state(FSMFillForm.select_crypto)
